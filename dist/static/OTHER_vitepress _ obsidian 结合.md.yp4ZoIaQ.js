import{_ as e,c as i,o as a,U as t}from"./chunks/framework.wSs3aZfZ.js";const u=JSON.parse('{"title":"vitepress & obsidian 结合","description":null,"frontmatter":{"layout":"doc","title":"vitepress & obsidian 结合","tags":["#博文"],"datetime":"2024-01-14T00:00:00.000Z","time":923,"description":null,"navbar":true,"sidebar":true,"footer":true},"headers":[],"relativePath":"OTHER/vitepress & obsidian 结合.md","filePath":"OTHER/vitepress & obsidian 结合.md"}'),s={name:"OTHER/vitepress & obsidian 结合.md"},o=t('<p>对我而言, 博客站点的目的是记录和展示自己的生活, 以此来作为自己在自己的生活的时间尺度上留下过痕迹的证明.</p><hr><h1 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h1><p>在此之前很长时间我都折腾过好几个博客 🥲, 有django + mdui 自建博客; 有wordpress 框架博客...但是我每次回头都会发现, 一年到头没写几篇内容. 复盘一下, 总得来说来来去去都是一下这几个问题纠缠着:</p><ol><li>写作不方便: 可视化富文本编辑器实在用得难受</li><li>发布不方便: 只能用网页进行编辑的话, 流程繁琐</li><li>站点访问卡顿:(本人服务器配置是最低档)</li><li>习惯难以养成: 自己虽然说有写笔记的习惯, 但是并没有打开网页写文章的习惯, 加上(1,2,3的难受用户体验, 进一步在开头的热情结束后, 打消了自己写东西的热情)</li></ol><p>刚好, 今年2024年开头, 我发现了一个不错的笔记应用obsidian, 初步体验下来, 我直接放弃了notion (使用notion的时候遇到了上面列出来的问题). 并且机缘巧合查阅资料之时, 也让我看到了vitepress 博客, 于是两者一拍即合, 有了新文章和这个新博客.</p><hr><h1 id="配合思路" tabindex="-1">配合思路 <a class="header-anchor" href="#配合思路" aria-label="Permalink to &quot;配合思路&quot;">​</a></h1><p>vitepress: 可以基于markdown 生成静态博客页面的简约框架, 我很喜欢他朴素的主题风格. obsidian: 异常好用的双链markdown笔记应用,支持非常多的插件, 觉得不好用, 还可以自己写: ). nginx: 高性能静态页面服务器, 当然就是用来部署vitepress build 出来的dist html文件了</p><p>![[obsidian-vitepress结构.svg]] 解释: obsidian: 这个就是默认写文章的地方, 直接通过obsidian 写markdown文章</p><p>github: obsidian安装git插件, 可以方便的push文章到github仓库中. 配置好webhook, 文章push到仓库的时候, 触发webhook.</p><p>vitepress: 服务器上安装好vitepress, 和接受hook响应的服务(此处我直接用flask写了一个简单的服务器用来响应), 响应后, 触发 vitepress build 命令</p><p>python script: 这个属于个人需求, 用来处理obsidian图片/文章链接格式转化回html支持的格式, 还有就是以支持obsidian 把静态图片文件统一放置一个文件夹的引用方式. (vitepress 渲染默认使用相对路径渲染, 只能找到markdown 统计目录下的图片, 放在其他目录下就回build报错, 于是暂时这样处理, 应该也可以通过修改vitepress源码处理, 此处我先用最快的方式处理了)</p><p>nginx deploy: 使用此种方式也是因为默认的vitepress preview 有bug, 并不是原生的读取html页面,(默认会有构建缓存?) 总之不够纯粹的静态html, 导致前面python script 重新渲染替换了的html 不生效.(总之目前这种方式结合起来是解决了问题😜)</p><p>思路主题其实就是 <strong>obsidian写</strong> -&gt; <strong>github触发自动发布</strong> -&gt; <strong>vitepress分享展示</strong>. 其他的节点都是为了解决遇到的坑而增加的一些措施</p><h1 id="动手吧" tabindex="-1">动手吧! <a class="header-anchor" href="#动手吧" aria-label="Permalink to &quot;动手吧!&quot;">​</a></h1><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>省略vitepress的[环境配置和安装过程](<a href="https://vitepress.dev/zh/guide/getting-started" target="_blank" rel="noreferrer">快速开始 | VitePress</a>),... 省略obsidian的[安装和配置](<a href="https://obsidian.md/" target="_blank" rel="noreferrer">Obsidian - Sharpen your thinking</a>) 省略安装nginx的过程... ...</p><h2 id="obsidian-文件结构" tabindex="-1">obsidian 文件结构 <a class="header-anchor" href="#obsidian-文件结构" aria-label="Permalink to &quot;obsidian 文件结构&quot;">​</a></h2><p>目前我的obsidian笔记仓库的文件夹结构如下:<br> ![[vitepress &amp; obsidian 结合-obsidian文件夹结构-2024-01-14.png]] 首先, <code>public</code>目录, 发布在vitepress 的文章所在目录. 其次, <code>personal</code>目录, 这个是我自定义的个人笔记的目录, 笔记软件嘛, 最基础的功能依然是服务好我自己的知识整理. 最后, <code>git</code>仓库下会配置过滤掉<code>personal</code>的 <code>.gitignore</code>, 这样就可以平衡好自己个人知识梳理的习惯, 和发布内容的便利了.</p><h2 id="配置github仓库-和-vitepress" tabindex="-1">配置github仓库 和 vitepress <a class="header-anchor" href="#配置github仓库-和-vitepress" aria-label="Permalink to &quot;配置github仓库 和 vitepress&quot;">​</a></h2><p>之后便是配置本地仓库, 创建并且配置远程仓库, 开启 webhook~</p><p>vitepress 按照官方教程配置好了就可以, 我这边的配置文件是这样的, 具体可以查看结尾的仓库地址查看配置, 介于我暂时对这个框架没有特别熟悉, 对前端的框架结构体系了解得不算太多, 就不具体展开vitepress了, 只打算把这个做成简易的工具进行简单的展示使用.</p><h2 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署" aria-label="Permalink to &quot;部署&quot;">​</a></h2><p>服务器上的简单webhook重启接收端, 我直接编写了一个基于flask简单服务.</p><p>最后一步就是启动接收webhook请求的服务, 在github 接收到push的时候发送webhook请求, 触发服务器重新build和重启nginx服务即可. 完毕,详细请查看仓库代码.</p><blockquote><p><a href="https://github.com/realzhengyiming/YiMingBlog" target="_blank" rel="noreferrer">realzhengyiming/YiMingBlog: a... new blog again 😅 (github.com)</a></p></blockquote>',27),r=[o];function n(p,d,h,l,b,c){return a(),i("div",null,r)}const _=e(s,[["render",n]]);export{u as __pageData,_ as default};
